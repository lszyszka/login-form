{"version":3,"sources":["Reducers/index.js","Store/index.js","mapStateToProps.js","mapDispatchToProps.js","Action/index.js","Components/register.js","Components/login.js","Components/logged.js","App.js","serviceWorker.js","index.js"],"names":["reducer","arguments","length","undefined","action","type","localStorage","setItem","payload","userName","password","user","store","createStore","applyMiddleware","thunk","mapStateToProps","state","Object","objectSpread","mapDispatchToProps","registerUser","loginUser","userLogin","Register","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","notify","toast","error","notifySucces","success","firstName","confirmPassword","e","setState","defineProperty","target","name","value","_this2","console","log","react_default","a","createElement","lib","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","onChange","handleInput","onClick","validate","Link","to","React","Component","connect","Login","isLogin","getItem","login","Redirect","Logged","src","App","es","BrowserRouter","className","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5de4790c.chunk.js","sourcesContent":["let initalState = {\r\n    user: {\r\n        firstName: \"\",\r\n        userName: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    },\r\n};\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case 'REGISTER' : {\r\n            localStorage.setItem(\"userName\", action.payload.userName);\r\n            localStorage.setItem(\"password\", action.payload.password);\r\n            return {user: action.payload}\r\n        }\r\n        case 'LOGIN' : {\r\n\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport reducer from '../Reducers/index'\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","export const mapStateToProps = (state) => {\r\n    return {...state};\r\n};","import * as action from './Action/index'\r\n\r\nexport const mapDispatchToProps = ({\r\n    registerUser: action.registerUser,\r\n    loginUser: action.loginUser,\r\n});\r\n\r\n\r\n","export const registerUser = (user) => (\r\n    {\r\n        type: \"REGISTER\",\r\n        payload: user,\r\n    });\r\n\r\nexport const loginUser = (userLogin) => ({\r\n    type: \"LOGIN\",\r\n    payload: userLogin,\r\n})\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                firstName: '',\r\n                userName: '',\r\n                password: '',\r\n                confirmPassword: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    handleInput(e) {\r\n        this.setState({user: {...this.state.user, [e.target.name]: e.target.value}});\r\n    }\r\n\r\n    notify = () => toast.error(\"Fill all input !\");\r\n    notifySucces = () => toast.success(\"Register succesful\");\r\n\r\n    validate() {\r\n        if (this.state.user.firstName === \"\" || this.state.user.userName === \"\" || this.state.user.password === \"\" ||\r\n            this.state.user.password !== this.state.user.confirmPassword) {\r\n            this.notify()\r\n        }\r\n        else {\r\n            this.props.registerUser(this.state.user);\r\n            this.notifySucces();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return <div>\r\n            <ToastContainer\r\n                position=\"bottom-center\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnVisibilityChange\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <label>First Name: </label><input name=\"firstName\" type=\"text\" onChange={(e) => {\r\n            this.handleInput(e)\r\n        }}/>\r\n            <label>User Name: </label><input name=\"userName\" type=\"text\" onChange={(e) => {\r\n            this.handleInput(e)\r\n        }}/>\r\n            <label>Password: </label><input name=\"password\" type=\"password\" onChange={(e) => {\r\n            this.handleInput(e)\r\n        }}/>\r\n            <label>Confim Password: </label><input name=\"confirmPassword\" type=\"password\" onChange={(e) => {\r\n            this.handleInput(e)\r\n        }}/>\r\n            <button onClick={() => {\r\n                this.validate();\r\n            }}>Send\r\n            </button>\r\n            <Link to=\"/\">Back to Login</Link>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nRegister = connect(mapStateToProps, mapDispatchToProps)(Register);\r\nexport default Register;\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Register from \"./register\";\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userLogin: {\r\n                userName: '',\r\n                password: ''\r\n            },\r\n            isLogin: undefined\r\n        }\r\n    }\r\n\r\n    handleInput(e) {\r\n        this.setState({userLogin: {...this.state.userLogin, [e.target.name]: e.target.value}})\r\n    }\r\n\r\n    login() {\r\n        if (this.state.userLogin.userName === localStorage.getItem('userName') &&\r\n            this.state.userLogin.password === localStorage.getItem('password')) {\r\n            console.log(\"Udalo sie zalogowac\");\r\n            this.setState({isLogin: true})\r\n        }\r\n        else {\r\n            this.setState({isLogin: false})\r\n            console.log(\"Niepoprawne dane\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLogin === undefined) {\r\n            return <div>\r\n                <label>User Name:</label><input type=\"text\" name=\"userName\" onChange={(e) => {\r\n                this.handleInput(e)\r\n            }}/>\r\n                <label>Password: </label><input type=\"password\" name=\"password\" onChange={(e) => {\r\n                this.handleInput(e)\r\n            }}/>\r\n                <button onClick={() => {\r\n                    this.login()\r\n                }}>Login\r\n                </button>\r\n                <button>\r\n                    <Link to=\"/register\">Register</Link>\r\n                </button>\r\n            </div>\r\n        }\r\n        if (this.state.isLogin) {\r\n            return <Redirect to=\"/logged\"/>\r\n        } else {\r\n            return <div>\r\n                Niepoprawne dane logowanie\r\n            </div>\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nLogin = connect(mapStateToProps, mapDispatchToProps)(Login);\r\nexport default Login;\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\nclass Logged extends React.Component {\r\n    render() {\r\n        return <div>\r\n            <img src=\"https://media.giphy.com/media/HXF45CT8cvzZC/giphy.gif\"/>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nLogged = connect(mapStateToProps, mapDispatchToProps)(Logged);\r\nexport default Logged;\r\n\r\n","import React, {Component} from 'react';\nimport {Provider} from 'react-redux';\nimport './App.css';\nimport store from './Store/index';\nimport Login from \"./Components/login\";\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport Register from \"./Components/register\";\nimport Logged from \"./Components/logged\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Router>\n                    <div className=\"App\">\n                        <Route exact path=\"/\" component={Login}/>\n                        <Route path=\"/register\" component={Register}/>\n                        <Route path=\"/logged\" component={Logged}/>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}