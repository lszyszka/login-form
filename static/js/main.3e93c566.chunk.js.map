{"version":3,"sources":["Reducers/index.js","Store/index.js","mapStateToProps.js","mapDispatchToProps.js","Action/index.js","Components/login.js","Components/register.js","App.js","serviceWorker.js","index.js"],"names":["reducer","arguments","length","undefined","action","type","localStorage","setItem","payload","userName","password","firstName","user","getItem","console","log","isLogin","store","createStore","applyMiddleware","thunk","mapStateToProps","state","Object","objectSpread","mapDispatchToProps","registerUser","loginUser","userLogin","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","notify","toast","error","e","setState","defineProperty","target","name","value","_this2","react_default","a","createElement","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","marginTop","Header","as","color","Form","size","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","onChange","handleInput","Button","onClick","Message","Link","to","src","alt","lib","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","timeID","setTimeout","window","location","reload","React","Component","connect","Register","notifySucces","success","confirmPassword","timeOutId","history","push","_this3","validate","App","es","BrowserRouter","basename","process","className","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e93c566.chunk.js","sourcesContent":["let initialState = {\r\n    user: {\r\n        firstName: \"\",\r\n        userName: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    },\r\n    isLogin: undefined,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'REGISTER' : {\r\n            localStorage.setItem(\"userName\", action.payload.userName);\r\n            localStorage.setItem(\"password\", action.payload.password);\r\n            localStorage.setItem(\"firstName\", action.payload.firstName);\r\n            return {user: action.payload}\r\n        }\r\n        case 'LOGIN' : {\r\n            if (action.payload.userName === localStorage.getItem('userName') &&\r\n                action.payload.password === localStorage.getItem('password')) {\r\n                console.log(\"Udalo sie zalogowac\");\r\n                return {isLogin: true}\r\n            }\r\n            else {\r\n                return {isLogin: false};\r\n                console.log(\"Niepoprawne dane\");\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport reducer from '../Reducers/index'\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","export const mapStateToProps = (state) => {\r\n    return {...state};\r\n};","import * as action from './Action/index'\r\n\r\nexport const mapDispatchToProps = ({\r\n    registerUser: action.registerUser,\r\n    loginUser: action.loginUser,\r\n});\r\n\r\n\r\n","export const registerUser = (user) => (\r\n    {\r\n        type: \"REGISTER\",\r\n        payload: user,\r\n    });\r\n\r\nexport const loginUser = (userLogin) => ({\r\n    type: \"LOGIN\",\r\n    payload: userLogin,\r\n})\r\n\r\n","import React from 'react';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport {Button, Form, Grid, Header, Message, Segment} from 'semantic-ui-react';\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userLogin: {\r\n                userName: '',\r\n                password: ''\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleInput(e) {\r\n\r\n        this.setState({userLogin: {...this.state.userLogin, [e.target.name]: e.target.value}})\r\n    }\r\n\r\n    notify = () => toast.error(\"Wrong username or password!\");\r\n\r\n    check() {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.isLogin === undefined) {\r\n            return <div>\r\n\r\n                <Grid textAlign='center' style={{height: '100%'}} verticalAlign='middle'>\r\n                    <Grid.Column style={{maxWidth: 450, marginTop: \"20px\"}}>\r\n                        <Header as='h2' color='teal' textAlign='center'>\r\n                            Log-in\r\n                        </Header>\r\n                        <Form size='large'>\r\n                            <Segment stacked>\r\n                                <Form.Input fluid icon='user' name='userName' iconPosition='left' placeholder='Login'\r\n                                            onChange={(e) => {\r\n                                                this.handleInput(e)\r\n                                            }}/>\r\n                                <Form.Input fluid icon='lock' iconPosition='left' placeholder='Password' type='password'\r\n                                            name='password' onChange={(e) => {\r\n                                    this.handleInput(e)\r\n                                }}/>\r\n\r\n                                <Button color='teal' fluid size='large' onClick={() => {\r\n                                    this.props.loginUser(this.state.userLogin)\r\n                                }}>\r\n                                    Login\r\n                                </Button>\r\n                            </Segment>\r\n                        </Form>\r\n                        <Message>\r\n                            New to us?<Link to=\"/register\">Register</Link>\r\n                        </Message>\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n\r\n            </div>\r\n        }\r\n        if (this.props.isLogin) {\r\n            return <div><img src=\"https://media.giphy.com/media/HXF45CT8cvzZC/giphy.gif\" alt=\"GOOD LUCK\"/>\r\n                <Header as='h2' color='teal' textAlign='center'>\r\n                    Login Successful ! <br/>\r\n                    Welcome {localStorage.getItem('firstName')} :)\r\n                </Header>\r\n            </div>\r\n        }\r\n        else {\r\n            return <div>\r\n                <ToastContainer\r\n                    position=\"top-center\"\r\n                    autoClose={2000}\r\n                    hideProgressBar={false}\r\n                    newestOnTop={false}\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    pauseOnVisibilityChange\r\n                    draggable\r\n                    pauseOnHover\r\n                />\r\n\r\n                {this.notify()}\r\n                {this.timeID = setTimeout(() => {\r\n                    window.location.reload()\r\n                }, 1500)}\r\n\r\n            </div>\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nLogin = connect(mapStateToProps, mapDispatchToProps)(Login);\r\nexport default Login;\r\n\r\n","import React from 'react';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nimport {Button, Form, Grid, Header, Message, Segment} from 'semantic-ui-react';\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                firstName: '',\r\n                userName: '',\r\n                password: '',\r\n                confirmPassword: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    handleInput(e) {\r\n        this.setState({user: {...this.state.user, [e.target.name]: e.target.value}});\r\n    }\r\n\r\n    notify = () => toast.error(\"Fill all input !\");\r\n    notifySucces = () => toast.success(\"Register succesful\");\r\n\r\n    validate() {\r\n        if (this.state.user.firstName === \"\" || this.state.user.userName === \"\" || this.state.user.password === \"\" ||\r\n            this.state.user.password !== this.state.user.confirmPassword) {\r\n            this.notify()\r\n        }\r\n        else {\r\n            this.props.registerUser(this.state.user);\r\n            this.notifySucces();\r\n            this.timeOutId = setTimeout(() => {\r\n                this.props.history.push(\"/\");\r\n            }, 1500)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return <div>\r\n            <ToastContainer\r\n                position=\"bottom-center\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnVisibilityChange\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Grid textAlign='center' style={{height: '100%'}} verticalAlign='middle'>\r\n                <Grid.Column style={{maxWidth: 450, marginTop: \"20px\"}}>\r\n                    <Header as='h2' color='teal' textAlign='center'>\r\n                        Register account\r\n                    </Header>\r\n                    <Form size='large'>\r\n                        <Segment stacked>\r\n                            <Form.Input fluid icon='user circle' name='firstName' iconPosition='left'\r\n                                        placeholder='First Name'\r\n                                        onChange={(e) => {\r\n                                            this.handleInput(e)\r\n                                        }}/>\r\n                            <Form.Input fluid icon='user circle outline' name='userName' iconPosition='left'\r\n                                        placeholder='User Name'\r\n                                        onChange={(e) => {\r\n                                            this.handleInput(e)\r\n                                        }}/>\r\n                            <Form.Input fluid icon='lock' name='password' iconPosition='left' type='Password'\r\n                                        placeholder='Password'\r\n                                        onChange={(e) => {\r\n                                            this.handleInput(e)\r\n                                        }}/>\r\n                            <Form.Input fluid icon='lock' name='confirmPassword' type='password' iconPosition='left'\r\n                                        placeholder='Confirm Password'\r\n                                        onChange={(e) => {\r\n                                            this.handleInput(e)\r\n                                        }}/>\r\n\r\n\r\n                            <Button color='teal' fluid size='large' onClick={() => {\r\n                                this.validate();\r\n                            }}>\r\n                                Register\r\n                            </Button>\r\n                        </Segment>\r\n                    </Form>\r\n                    <Message>\r\n                        Already have an account? <Link to=\"/\">Back to Login</Link>\r\n                    </Message>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nRegister = connect(mapStateToProps, mapDispatchToProps)(Register);\r\nexport default Register;\r\n\r\n","import React, {Component} from 'react';\nimport {Provider} from 'react-redux';\nimport './App.css';\nimport store from './Store/index';\nimport Login from \"./Components/login\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Register from \"./Components/register\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Router basename={process.env.PUBLIC_URL}>\n                    <div className=\"App\">\n                        <Route exact path=\"/\" component={Login}/>\n                        <Route path=\"/register\" component={Register}/>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}